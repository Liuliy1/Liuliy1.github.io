<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【项目复盘】 HEXO搭建个人博客并免备案部署</title>
    <link href="/2025/03/02/%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98-HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%85%8D%E5%A4%87%E6%A1%88%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/03/02/%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98-HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%85%8D%E5%A4%87%E6%A1%88%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="HEXO搭建个人博客"><a href="#HEXO搭建个人博客" class="headerlink" title="HEXO搭建个人博客"></a>HEXO搭建个人博客</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​很早就想做一个个人网站，但是总是在脑内把这件事想象成非常困难的事情，想着要手写各种效果加上还要备案等杂七杂八的事情，加上又懒，就迟迟没有动工。</p><p>​这几天闲下来稍微研究了一下，找到了相关的教程，发现用HEXO部署github page作为个人博客十分的简单，其实一天就能搞定。</p><p>​但是部署了githu page之后又看不顺眼默认的 <em>username.github.io</em> 想要一个有自己特色的域名，于是就找到了namesilo去购买域名。</p><p>​可之后又发现访问我的网站像不开魔法访问github一样，时灵时不灵，又去查了CDN加速网站。</p><p>​最后发现制作网站只需要一天，后续工作，修bug反而花了三四天。感觉除了网上教程之外还是有不少东西可以说的,特别是很多被省略的内容但是我这种小白又不懂的，所以就写下这篇复盘。</p><p><strong>看完这篇复盘，我相信99%的人能搭建一个自己的个人博客</strong></p><h1 id="一、使用hexo建站并部署到github-page"><a href="#一、使用hexo建站并部署到github-page" class="headerlink" title="一、使用hexo建站并部署到github page"></a>一、使用hexo建站并部署到github page</h1><h2 id="1-1-什么是hexo"><a href="#1-1-什么是hexo" class="headerlink" title="1.1 什么是hexo ?"></a>1.1 什么是hexo ?</h2><p>hexo 是github上的一个开源项目 ：<a href="https://github.com/hexojs/hexo?tab=readme-ov-file">hexojs&#x2F;hexo：一个快速、简单且强大的博客框架，由Node.js提供支持。</a></p><p>在他的<a href="https://hexo.io/zh-cn/">官方网站</a>写的是：<strong>Hexo 是一个快速、简单且功能强大的博客框架。你用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）写文章，Hexo 会在几秒钟内生成具有漂亮主题的静态文件。</strong></p><p>它提供了强大的API，有大量的模板，主题和插件，能够很方便的一键部署到github page等网站。</p><p>甚至你一定html都不会写，都能做出自己的网站（只需要知道一点markdown语法）</p><p>只需要知道四个hexo 指令（别复制后面的中文）,每当有什么更改，最好都运行一下前三个指令，保证更改能生效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo clean 清除缓存<br>hexo <span class="hljs-selector-tag">g</span> 生成页面<br>hexo s 启动hexo服务器<br>hexo d 推送到github <span class="hljs-attribute">page</span><br></code></pre></td></tr></table></figure><h2 id="1-2-如何安装使用？"><a href="#1-2-如何安装使用？" class="headerlink" title="1.2 如何安装使用？"></a>1.2 如何安装使用？</h2><p>因为hexo是基于Node.js的，所以我们需要先安装Node.js</p><p>然后要部署到github page上，我们也要安装git</p><p>最后再通过<code> npm install -g hexo-cli</code> 安装hexo</p><p>在这一步我是参考 CSDN上的教程： <a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列-CSDN博客</a></p><p>可以先移步阅读csdn教程</p><p>因为这教程写的非常好，教程中已有的内容我就不过多赘述了。只对教程中没有的内容进行补充：</p><h3 id="安装时报错？"><a href="#安装时报错？" class="headerlink" title="安装时报错？"></a>安装时报错？</h3><p>​在Windows 系统中，是通过Windows PowerShell进行安装的，其中绝大多数的命令都要使用到管理员权限，不然就会报错。</p><p>​所以如果用WIN+R打开的power shell输入命令报错的话，可以点WIN键直接搜索Power shell然后选择以管理员身份运行，参考图1-1</p><p><img src="/img/project/blog/1-1.png" alt="img1-1"></p><center>【图1-1】</center><h3 id="无法安装admin等插件？"><a href="#无法安装admin等插件？" class="headerlink" title="无法安装admin等插件？"></a>无法安装admin等插件？</h3><p>​注意在安装完hexo后，创建项目以及后续的安装hexo-admin插件都需要cd到网站目录中进行。比如我是 <code>cd E:\Work\Blog</code></p><h3 id="如何修改网站模板？"><a href="#如何修改网站模板？" class="headerlink" title="如何修改网站模板？"></a>如何修改网站模板？</h3><p>​在选择主题时，不一定要按照教程中使用的Fluild的主题。只要记住使用所有主题之前，都先去查看官方的配置文档。比如<a href="https://hexo.fluid-dev.com/docs/">Fluid的配置文档</a>。<br>​因为教程作者的教程可能会过期，导致某些语句改变并失效，但是官方文档肯定会更新的；</p><p>​这里粘贴一下官方文档比较重要的内容：</p><p><img src="/img/project/blog/1-2.png" alt="1-2"></p><center>【图1-2】</center><p><img src="/img/project/blog/1-3.png" alt="1-3"></p><center>【图1-3】</center><p>​理解了图1-2和图1-3中的内容后，阅读文档中大部分内容并实操就不成问题了。</p><p>​再补充一下如何为文章添加标签和分类</p><h4 id="添加标签和分类："><a href="#添加标签和分类：" class="headerlink" title="添加标签和分类："></a>添加标签和分类：</h4><p>如果你是通过hexo-admin写文章，那么如图1-4所示，在右上角的小齿轮处，就可以添加分类和标签</p><p><img src="/img/project/blog/1-4.png" alt="1-4"></p> <center>【图1-4】</center><p>如果是在本地新建文件，只需要在Front-matter处，也就是三个小横线”<strong>—</strong>“之前粘贴下面的内容，即可添加：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span><br>  - 你的标签<br>categories:<br>  - 你的类别<br></code></pre></td></tr></table></figure><h5 id="分类和标签的书写规则"><a href="#分类和标签的书写规则" class="headerlink" title="分类和标签的书写规则"></a>分类和标签的书写规则</h5><p>只有文章支持分类和标签。 分类按顺序应用于文章，从而形成<strong>分类和子分类</strong>的层次结构。 标签是在相同的层次结构上定义的，因此它们的出现顺序不重要。</p><p><strong>示例</strong> (通过admin页面添加分类和标签默认是这种格式)</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>  - Sports<br>  - Baseball<br><span class="hljs-keyword">tags:</span><br>  - Injury<br>  - Fight<br>  - Shocking<br></code></pre></td></tr></table></figure><p>如果你想应用多个分类层次结构，请使用一个名称列表而不是一个单个名称。 如果 Hexo 在帖子上看到像这种方式定义的分类，它会将该帖子的每个分类视为其自己的独立层次结构。</p><p><strong>示例</strong></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">[Sports, Baseball]</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">[MLB, American League, Boston Red Sox]</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">[MLB, American League, New York Yankees]</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Rivalries</span><br></code></pre></td></tr></table></figure><h5 id="如何显示或隐藏菜单页面"><a href="#如何显示或隐藏菜单页面" class="headerlink" title="如何显示或隐藏菜单页面"></a>如何显示或隐藏菜单页面</h5><p>在网站默认的导航栏中,有 首页、归档、分类、标签、关于（需要创建）这几个菜单，如果我们想添加或隐藏其中的内容，只需要在_config.fluid.yml中找到menu的配置，按照相同的格式进行增加或修改就好了。</p><p>下面是我的例子，我将“标签”页这一行注释掉了，所以菜单上就不显示标签</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">menu:<br>  - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  # - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/tags/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  - &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>  #- &#123; <span class="hljs-keyword">key</span>: <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-keyword">link</span>: <span class="hljs-string">&quot;/links/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>其他未提到的内容就看配置文件和官方文档都能解决</p><h2 id="1-3部署github-page"><a href="#1-3部署github-page" class="headerlink" title="1.3部署github page"></a>1.3部署github page</h2><p>在所有工作都做完之后，我们安装好了 hexo-deployer-git插件，创建好了我们的github仓库，在图1-5所示的配置文件中将“repo: “ 后面的内容改成我们仓库对应的https地址。我们就可以推送了。</p><p><img src="/img/project/blog/1-5.png" alt="1-5"></p><center>【图1-5】</center><p>建议每次推送前都要 hexo clean + hexo g一遍，保证推送的内容是最新的。</p><p>如果推送顺利，过一会我们就可以访问到我们的网站了，通过 username.github.io。比如我的liuliy1.github.io</p><p>当然，前提是推送顺利，也有可能会出现不顺利的情况，比如报错 <strong>”fatal: unable to access“</strong>。这种情况主要是网络问题，没法访问到github，而不是自身项目问题，遇到这种情况最简单的方法是多推送几遍，有可能就成功了。如果不成功，那就再用下面的方法。</p><h3 id="解决推送失败"><a href="#解决推送失败" class="headerlink" title="解决推送失败"></a>解决推送失败</h3><p>方法一：取消代理设置</p><p>通过在终端执行以下命令，取消 Git 的代理设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy <br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><p>方法二：设置系统代理</p><p>打开系统设置，直接搜索 <strong>更改代理设置</strong>, 启用代理服务器，然后将端口设置为 7890</p><p><img src="/img/project/blog/1-6.png" alt="1-6"></p><center>【图1-6】</center><p><img src="/img/project/blog/1-7.png" alt="1-7"></p><center>【图1-7】</center><p>接着在终端输入命令，设置 Git 使用本地代理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p> 设置完成后，可以通过以下命令检验是否设置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global -l<br></code></pre></td></tr></table></figure><p>然后我们就能够正常推送了，这里需要注意的一点，推送后的内容可能并不立马更新，有一定的延迟。</p><p>如果只想有一个个人博客，到刚才的那一步就已经结束了。</p><p>现在来解决如何让网站显得更加专业，更有个人特色——设置自定义域名</p><h1 id="二、自定义域名"><a href="#二、自定义域名" class="headerlink" title="二、自定义域名"></a>二、自定义域名</h1><h2 id="2-1-域名是什么"><a href="#2-1-域名是什么" class="headerlink" title="2.1 域名是什么"></a>2.1 域名是什么</h2><p>简单来说，域名就是一种映射，互联网通过ip地址来定位服务器，一个域名能对应一个ip地址，所以我们能通过域名来访问服务器。</p><p>所以我们现在的目的就是，购买一个域名，将我们的username.github.io 与这个域名建立映射，这样访问我们的自定义域名就能访问到我们的网站。</p><h2 id="2-2购买域名"><a href="#2-2购买域名" class="headerlink" title="2.2购买域名"></a>2.2购买域名</h2><p>域名的服务商有很多，我这里选择的是国外的**<a href="https://www.namesilo.com/">NameSilo</a>**，据说是国外的域名服务商中最便宜的。</p><p>之所以不选择国内的域名服务商是因为国内域名都是需要先备案才能使用的，而备案就更加麻烦，还需要有服务器（要钱。</p><p>而且github属于国外的服务器，也无法使用国内的域名。</p><p>用法如下：</p><ol><li>先直接在NameSilo官网搜索是否有你想要的域名，如图1-8所示，网站会给出不同顶级域名的不同价格，如果没有要求选择最便宜的就好。</li></ol><p><img src="/img/project/blog/2-1.png" alt="2-1"></p><center>【图2-1】</center><ol start="2"><li><p>然后就是正常的注册账号，填写相关信息时，地址无法输入中文，输入拼音即可。</p></li><li><p>注册完就可以支付了，没有什么需要特别注意的选项，正常下单支付就行，可以选择支付宝付款。</p><p><img src="/img/project/blog/2-2.png" alt="2-2"></p><center>【图2-2】</center></li></ol><h2 id="2-3设置DNS解析"><a href="#2-3设置DNS解析" class="headerlink" title="2.3设置DNS解析"></a>2.3设置DNS解析</h2><p>当我们完成购买后，在我们个人账号信息中就可以看到我们有一个活跃的域名，如图2-3，我们直接点击Manage进入管理界面。</p><p><img src="/img/project/blog/2-3.png" alt="2-3"></p><center>【图2-3】</center><p>进入图2-4所示界面后，点击右侧的蓝色小球进入图2-4的设置DNS解析页面</p><p><img src="/img/project/blog/2-4.png" alt="2-4"></p><center>【图2-4】</center> <p><img src="/img/project/blog/2-5.png" alt="2-5"></p><center>【图2-5】</center>这里不需要在意上面已经写的内容，直接向下拉，找到github，然后应用。这是namesilo提供的常用网站的模板，会自动填充github服务器的四个A记录，将域名直接映射到github服务器.<p><img src="/img/project/blog/2-6.png" alt="2-6"></p><center>【图2-6】</center><h2 id="2-4-github配置"><a href="#2-4-github配置" class="headerlink" title="2.4 github配置"></a>2.4 github配置</h2><p>剩下的部分就很简单了，我们只需要在我们的网页指定这个域名，就能将域名与我们的网页连通起来了。</p><p>先进入网站对应的仓库，点击Setting</p><p><img src="/img/project/blog/2-7.png" alt="2-7"></p><center>【图2-7】</center><p>然后选择Pages,拉到最下面，Custom domain的位置，输入我们购买的域名，保存并等待一段时间（可能是好几个小时）之后，我们就可以通过域名访问到我们之前创建的个人博客了。</p><p><img src="/img/project/blog/2-8.png" alt="2-8"></p><center>【图2-8】</center><p><img src="/img/project/blog/2-9.png" alt="2-9"></p><center>【图2-9】</center><h1 id="三、-CDN加速网站"><a href="#三、-CDN加速网站" class="headerlink" title="三、 CDN加速网站"></a>三、 CDN加速网站</h1><p>由于我们是用github部署的网站，github又是外国服务器，所以普通用户想访问我们的网站可能会出现访问不上或者及其卡顿的问题，这个时候就需要用到CDN来加速我们网站的访问。</p><p><u><em>当然，这一步也可以省略，毕竟我们的网站已经可以访问了。</em></u></p><h2 id="3-1CDN是什么？"><a href="#3-1CDN是什么？" class="headerlink" title="3.1CDN是什么？"></a>3.1CDN是什么？</h2><p><strong>CDN（Content Delivery Network，内容分发网络）</strong> 是一种通过全球分布的服务器网络，将内容（如网页、图片、视频等）缓存到离用户更近的节点，从而加速访问速度、降低延迟并提升稳定性的技术体系。</p><p>简单来说，就是把我们网页的缓存存储到不同的地方，当我们要访问网页时，可以直接从最近的缓存访问网页，而不需要跨越漫长的距离访问服务器。</p><p>当我们的网页更新时，这些缓存也要定时更新</p><h2 id="3-2如何配置CDN"><a href="#3-2如何配置CDN" class="headerlink" title="3.2如何配置CDN"></a>3.2如何配置CDN</h2><p>我这里以<strong>腾讯云</strong>为例</p><p>注册完账号之后，点开图3-1所示的内容分发网络CDN，它会提示有一个edgeone的14天免费试用 也就是图3-1中的边缘安全加速平台 EO，我这里就以这个试用为例子，当然如果选择不试用，继续开通CDN其实也是差不多的操作。</p><p>至于14天后是继续续费还是更换CDN那都不是什么问题，毕竟已经知道操作流程了。</p><p><img src="/img/project/blog/3-1.png" alt="3-1"></p><center>【图3-1】</center><p>之后选择如图3-2所示站点列表，新增站点，这里注意添加时要选择全球区</p><p><img src="/img/project/blog/3-2.png" alt="3-2"></p><center>【图3-2】</center><p>第一次添加的时候，可能会要你在dns管理处添加txt来验证域名的所有权，这个时候回到namesilo添加txt就行了，验证完了之后就可以删掉那一条</p><p><img src="/img/project/blog/3-3.png" alt="3-3"></p><center>【图3-3】</center><p>接着点击域名管理，添加域名，记得选择HTTPS，如图3-4所示</p><p><img src="/img/project/blog/3-4.png" alt="3-4"></p><center>【图3-4】</center><p><img src="/img/project/blog/3-5.png" alt="3-5"></p><center>【图3-5】</center><p>这里选择源站组，第一次添加域名时，我们要手动创建源站组，照着图3-6填就是了。就是将之前dns解析的四个a记录填入</p><p>名字可以随便起，但是源站组类型 <strong>一定，必须</strong>选 <strong>通用型</strong>。这折腾了我非常长的时间</p><p>ip如下：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">185.199.108.153</span><br><span class="hljs-number">185.199.109.153</span><br><span class="hljs-number">185.199.110.153</span><br><span class="hljs-number">185.199.111.153</span><br></code></pre></td></tr></table></figure><p><img src="/img/project/blog/3-6.png" alt="3-6"></p><center>【图3-6】</center><p>添加完源站组后，就可以去添加域名了,参考刚才的图3-5，这里也是记得选HTTPS.</p><p>这里简单补充一下http和https的区别：</p><p>https是有加密的，比http更加安全，当浏览器访问https的网页时，左上角能有一个安全锁的图标；但是当访问http的网页时，会直接提示你<strong>网站不安全</strong>，显得非常不专业。</p><p>除此之外，cdn这里选择https还有一个重要的原因：</p><p>​前面我们在github配置自定义域名时，启用了强制https。如果这里的源站组是http专用型，就会出现冲突。导致用户在访问网页时 进入http然后重定向到https，又被强制重定向成http。导致重定向过多，完全无法访问。就像写了一个while（1)循环一样。也要注意CDN<strong>不要启用强制HTTPS</strong>，会与github的冲突</p><p>当我们网站访问不了时，我们可以在<a href="https://www.redirect-checker.org/index.php">Redirect Checker </a>这个网站验证是否是重定向过多导致的问题，</p><p>​如果是 则会提示 301报错</p><p>​如果网站正常，则会显示 200 OK</p><h2 id="3-3申请证书"><a href="#3-3申请证书" class="headerlink" title="3.3申请证书"></a>3.3申请证书</h2><p>回归正文，添加完域名后，我们就可以为我们的网站颁发证书了。此时点击左上角的三横线的菜单，找到ssl证书，然后申请免费证书。</p><p><img src="/img/project/blog/3-7.png" alt="3-7"></p><center>【图3-7】</center><p>然后一步步填写内容就好了，这里还需要像前面提到的，在namesilo填入txt进行验证。</p><p><img src="/img/project/blog/3-8.png" alt="3-8"></p><center>【图3-8】</center><p>申请完证书后，我们回到域名管理界面，点击批量配置证书，然后点击证书再选择我们的刚刚创建的域名。</p><p><img src="/img/project/blog/3-9.png" alt="3-9"></p><center>【图3-9】</center><p>然后就到了最后一步，配置CNAME。</p><p>在域名管理界面会提供一个CNAME，这个时候的状态是等待配置CNAME，我们将CNAME复制，然后打开NameSilo的DNS解析界面，选择CNAME粘贴并添加</p><p><img src="/img/project/blog/3-10.png" alt="3-10"></p><center>【图3-10】</center><p><img src="/img/project/blog/3-11.png" alt="3-11"></p><center>【图3-11】</center><p><u>这个时候需要注意，要把我们第二步自定义域名给的四个A地址给删除，不然解析会出现问题。</u></p><p>接下来只需要等待几个小时，去睡个觉，回来就发现我们的网站能够快速访问了。</p><p>这里可以用<a href="https://dnschecker.org/#CNAME/www.liuliygames.top">DNS Checker</a> 来检测我们的CDN是否配置成功了，如果输入我们域名后，显示的是CDN给出的CNAME，那就是配置成功了。</p><h2 id="3-4缓存设置"><a href="#3-4缓存设置" class="headerlink" title="3.4缓存设置"></a>3.4缓存设置</h2><p>我们前面提到了CDN是通过在不同的服务器缓存我们的网页来实现快速访问的，那我们要更新网页的时候怎么办呢。</p><p><img src="/img/project/blog/3-12.png" alt="3-12"></p><center>【图3-12】</center><p>我们点击左侧的站点加速，去配置我们的缓存规则,在文件后缀等于html时，设置不缓存（这里默认是没有html的）。</p><p>还有节点缓存时间，设置多久会自动更新，这个时间设置的短的话会增大我们的流量消耗（会计费的）</p><p>如果设置的长的话，可能我们更新了网页后，用户访问我们的网站还是旧版的，自己权衡就好。</p><p><img src="/img/project/blog/3-13.png" alt="3-13"></p><center>【图3-13】</center><p>如果我们推送了新内容，想让网页立马能够更新呢，就直接选择清除缓存，这样CDN会自己调用新的服务器数据去更新缓存。</p><p><img src="/img/project/blog/3-14.png" alt="3-14"></p><center>【图3-14】</center><h1 id="四、补充说明"><a href="#四、补充说明" class="headerlink" title="四、补充说明"></a>四、补充说明</h1><p>当我们推送新内容时，可能会出现怎么样按照刚才的缓存进行操作都不能更新，并且能通过username.github.io去访问我们的网站，我们回到第二步自定义域名的地方会发现我们自定义域名被清空了。</p><p>这个时候就是我们githubpage的CNAME被推送覆盖掉了。当我们在github上设置自定义域名时，会在文件根目录创建一个CNAME，里面就写着我们自定义的域名，但是我们hexo中是没有的，所以一推送新内容就会替换掉。</p><p>解决这个问题的方法就是在source下新建一个CNAME文件，填入域名，这样每次我们输入hexo g的时候，都会在public目录下创建一个CNAME，这样hexo d就能将CNAME推送到github上了。</p><h1 id="参考，引用文献"><a href="#参考，引用文献" class="headerlink" title="参考，引用文献"></a>参考，引用文献</h1><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_43546721/article/details/139506583">完美解决 git 报错 “fatal: unable to access ‘https://github.com/.../.git‘: Recv failure Connection was rese-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/393050270">Github 部署个人网页 | 自定义域名 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/393779644">Github 部署 | CDN 加速网页，速度嗖嗖的快！ - 知乎</a></p>]]></content>
    
    
    <categories>
      
      <category>项目复盘</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【团队项目】游戏发布-《溯源·数源》</title>
    <link href="/2025/02/26/%E3%80%90%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E3%80%91%E6%B8%B8%E6%88%8F%E5%8F%91%E5%B8%83-%E3%80%8A%E6%BA%AF%E6%BA%90%C2%B7%E6%95%B0%E7%BC%98%E3%80%8B/"/>
    <url>/2025/02/26/%E3%80%90%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E3%80%91%E6%B8%B8%E6%88%8F%E5%8F%91%E5%B8%83-%E3%80%8A%E6%BA%AF%E6%BA%90%C2%B7%E6%95%B0%E7%BC%98%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="溯源·数缘"><a href="#溯源·数缘" class="headerlink" title="溯源·数缘"></a>溯源·数缘</h1><p>游戏已发布：</p><ul><li>机核网: <a href="https://www.gcores.com/games/123608">https://www.gcores.com/games/123608</a></li><li>itch.io: <a href="https://liuliy.itch.io/date-back-to-math">https://liuliy.itch.io/date-back-to-math</a></li></ul><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>《溯源·数缘》是一款以中国古代数学文化为主题的解密和角色扮演类型游戏 游戏由9个场景，7个章节，4个主要互动游戏以及数个可交互物件和知识答题构成，美术原画素材近百张</p><h3 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h3><p> 在游戏内，世界的科技水平已经十分发达，但中国古代数学成就却即将淹没于历史长河中。为保护中国古代数学成就，寻回被损坏的记载，玩家需要不断穿梭于过去与现在，亲身体会古代数学家的生平经历，翻阅古代数学著作，追本溯源，寻找并体悟中国古代数学的深刻内涵与文化。</p><h3 id="游戏特色"><a href="#游戏特色" class="headerlink" title="游戏特色"></a>游戏特色</h3><p> 本作品结合了中国古代数学文化，为发挥寓教于乐的思想，结合了周易，河图洛书，杨辉三角，勾股定理，祖暅原理等众多内容来设计关卡与剧情。</p><h3 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h3><ul><li>项目完全使用Unity完成</li><li>使用Qframwork框架作为代码框架</li><li>使用Fungus插件来实现人物对话，</li><li>使用dotween插件来实现动画效果</li></ul><h2 id="部分图片展示"><a href="#部分图片展示" class="headerlink" title="部分图片展示"></a>部分图片展示</h2><p> <img src="/img/project/dateBackToMath/image1.png"><br> <img src="/img/project/dateBackToMath/image2.png"><br> <img src="/img/project/dateBackToMath/image3.png"><br> <img src="/img/project/dateBackToMath/image5.png"><br> <img src="/img/project/dateBackToMath/image6.png"></p>]]></content>
    
    
    <categories>
      
      <category>项目发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目复盘】杀戮尖塔mod开发复盘-抢劫商人</title>
    <link href="/2025/02/25/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94mod%E5%BC%80%E5%8F%91%E5%A4%8D%E7%9B%98/"/>
    <url>/2025/02/25/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94mod%E5%BC%80%E5%8F%91%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="杀戮尖塔mod开发复盘-抢劫商人"><a href="#杀戮尖塔mod开发复盘-抢劫商人" class="headerlink" title="杀戮尖塔mod开发复盘 - 抢劫商人"></a>杀戮尖塔mod开发复盘 - 抢劫商人</h1><h2 id="一、成果介绍"><a href="#一、成果介绍" class="headerlink" title="一、成果介绍"></a>一、成果介绍</h2><p>本次开发的mod名为“抢劫商人”，已发布至</p><ul><li>steam杀戮尖塔的创意工坊<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3235423149">https://steamcommunity.com/sharedfiles/filedetails/?id=3235423149</a></li><li>以及github<a href="https://github.com/Liuliy1/RobbingMerchantMod">Liuliy1&#x2F;RobbingMerchantMod: Allow you to rob merchants in SlayTheSpire</a>。</li></ul><p>截止本文撰写时已有近2w浏览量与5k+订阅。在刚发布时也登上过周热门榜，因为本次开发只想体验一下mod开发的工作流，便没有继续维护，后续也没有再获得曝光以及数据增长。</p><p><img src="/img/project/robbingMerchant/result.png"></p><h2 id="二、开发流程"><a href="#二、开发流程" class="headerlink" title="二、开发流程"></a>二、开发流程</h2><p>整个mod的开发流程大抵如下</p><ul><li>需求分析</li><li>在官方GitHub上查询开发的接口模板</li><li>反编译游戏源码和其他mod进行学习</li><li>在idea中编写代码</li><li>测试并发布</li></ul><p>开发过程中使用的是Java语言，如果没有mod开发基础就得加上学习java的环节。不过对java知识的要求并不多，只要看得懂别人的代码以及官方给出的示例就基本能写。</p><hr><h2 id="三、需求分析"><a href="#三、需求分析" class="headerlink" title="三、需求分析"></a>三、需求分析</h2><p>在我看来，所有的mod开发的需求分析都十分简单。mod开发的需求就两类：</p><ul><li>1、增加游戏内容</li><li>2、修复游戏痛点</li></ul><p>我的出发点是便是第二类，因为在游玩时总会有出现想在商人处购买关键物品却缺钱的情况，无能狂怒后只能含恨离场。</p><p>从此萌生了抢劫商人的想法。然后在游戏社区逛时也发现其他人有说这个问题，那既然大家都有需求，这mod做出来的数据肯定不会太差，于是就确定了mod的主题。</p><p>再之后便是架构设计，想想这个mod需要什么：</p><ol><li>面对商人的时候需要有一个按钮可以点击就抢劫</li><li>选择抢劫会进入战斗，战斗怎么设计</li><li>战斗赢了可以0元购，怎么改商品的金钱</li><li>在抢劫中途SL能不能正常触发各种情况 (也就是数据的保存)</li></ol><hr><h2 id="四、学习教程"><a href="#四、学习教程" class="headerlink" title="四、学习教程"></a>四、学习教程</h2><p>需求确定之后就要着手开发，但是此时对整个开发流程还是一头雾水，只能去站在前人的肩膀上。</p><ol><li><p>知乎上这个大佬的教程：<a href="https://zhuanlan.zhihu.com/p/403468512">杀戮尖塔MOD制作详解（1）基础环境搭建 - 知乎</a>：</p><ul><li><p>里面详细描述了从创建项目到在游戏中测试的流程</p></li><li><p>以及创建角色，卡牌，遗物 <em>（可惜从前文的需求分析中我们确定了这个mod不需要这些内容</em>）</p></li></ul></li><li><p>GitHub上的basemod教程：<a href="https://github.com/daviscook477/BaseMod/wiki/Hooks">Hooks · daviscook477&#x2F;BaseMod Wiki · GitHub</a>：</p><ul><li><p>这个教程就提供了接口的案例，比如要添加怪物该怎么写之类的:</p></li><li><p>不过也并不全，有些我的疑问并不能在上面得到解答（可能是我没看懂</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receivePostInitialize</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// Add a single monster encounter</span><br>    BaseMod.addMonster(MyMonster.ID, () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMonster</span>());<br>    <span class="hljs-comment">// Add a multi-monster encounter</span><br>    BaseMod.addMonster(<span class="hljs-string">&quot;MyMonsters&quot;</span>, () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MonsterGroup</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AbstractMonster</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMonster</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMonster2</span>()<br>    &#125;));<br><br>    BaseMod.addMonsterEncounter(TheCity.ID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MonsterInfo</span>(MyMonster.ID, <span class="hljs-number">5</span>));<br>    BaseMod.addStrongMonsterEncounter(TheBeyond.ID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MonsterInfo</span>(<span class="hljs-string">&quot;MyMonsters&quot;</span>, <span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>GitHub上的ModTheSpire教程<a href="https://github.com/kiooeht/ModTheSpire/wiki/SpirePatch2">SpirePatch2 · kiooeht&#x2F;ModTheSpire Wiki · GitHub</a><ul><li>教了如何将你的代码填补&#x2F;修改到游戏原本的代码中 (正是我们需要的修改商人)</li><li>patch的写法（<strong>重中之重</strong>）</li></ul></li><li>还要尖塔wiki：<a href="https://sts.huijiwiki.com/wiki/%E9%A6%96%E9%A1%B5">杀戮尖塔&#x2F;尖塔奇兵（Slay the Spire）中文维基|攻略百科|考据资料|Steam - 灰机wiki - 北京嘉闻杰诺网络科技有限公司</a><ul><li>用于查询游戏的某些卡牌或怪物名字、编号之类的信息</li></ul></li><li>唯一真神 <a href="https://glitchedreme.github.io/SlayTheSpireModTutorials/#/">杀戮尖塔mod制作教程</a><ul><li>比前文的教程更加详细了讲解了各个部分</li><li>重要的是有高级技巧的写法：patch、保存数据</li></ul></li><li>反编译其他大佬的mod<ul><li>最简单的方式是直接扔进idea</li><li>上文的教程中也有提供反编译的工具</li><li>很多教程没写到的功能可以在其他大佬mod中发现并以借鉴，毕竟教程是稀少的但是mod是海量的，本mod的商人房间的代码就借鉴了著名mod的dowanfall的实现</li></ul></li></ol><hr><h2 id="五、-动手开发"><a href="#五、-动手开发" class="headerlink" title="五、 动手开发"></a>五、 动手开发</h2><p>文件目录如下：</p><p><img src="/img/project/robbingMerchant/file1.png"><br><img src="/img/project/robbingMerchant/file2.png"></p><p>上一部分教程中已经涵盖了的大部分内容，这里就不再赘述，简单讲一下这次开发的实际内容。</p><h3 id="第一部分，建立类："><a href="#第一部分，建立类：" class="headerlink" title="第一部分，建立类："></a>第一部分，建立类：</h3><ol><li>建立注册类RobbingMerchant，实现接口 EditStringsSubscriber, PostDeathSubscriber <ul><li>用于整个mod的初始化</li><li>加载文件</li></ul></li><li>建立怪物类 MerchantInRob 继承AbstractMonster用于实现与商人战斗时的商人。包括：<ul><li>商人的各项数据</li><li>行动方式</li><li>图片渲染方式</li></ul></li><li>建立抢劫后商人类 MerchantAfterRob  实现Disposable接口，<ul><li>用于实现抢劫后0元购道具</li><li>商人的图片渲染</li></ul></li><li>商店房间类CustomShopRoom 继承 ShopRoom<ul><li>实现进入商店时的逻辑</li><li>抢劫按钮的显示</li><li>商人的显示</li><li>战斗的触发</li></ul></li></ol><h3 id="第二部分，patch"><a href="#第二部分，patch" class="headerlink" title="第二部分，patch"></a>第二部分，patch</h3><p>patch是本次开发十分关键的一个内容</p><p>patch的中文翻译是补丁，它的功能也跟名字一样，为游戏源代码打补丁。</p><p>我们前面提到的修改商人等功能，都不是脱离原游戏的新增加内容，而是对游戏原本的商人功能进行魔改。</p><p>因此我们需要反编译游戏源代码，找到有关内容的函数，甚至是第几行，然后根据patch的格式对源代码添加函数或修改内容。参考 <a href="https://glitchedreme.github.io/SlayTheSpireModTutorials/#/">杀戮尖塔mod制作教程</a></p><hr><h2 id="六、测试并发布"><a href="#六、测试并发布" class="headerlink" title="六、测试并发布"></a>六、测试并发布</h2><p>在代码测试阶段时，不需要发布到创意工坊，只要将导出的mod文件塞到对应的文件夹中即可。</p><p>测试完毕并通过命令的方式上传后，便可在steam创意工坊的界面查看到mod的状态，可以重新修改标题和描述，不过要是更新上传还是需要通过命令的方式。</p><hr><p>至此，抢劫商人mod就完成了。虽然整个架构看起来是十分简单，但是我整个mod的开发到完成也用了一个月的时间，主要是对各个接口的实现不太清晰，patch的写法在此之前从未听闻。</p><p>在新手入门时，建议综合多个教程以及源码，用比较的方式便可以知道一些接口和函数“为什么要这么写”。</p><p>不过在有了开发mod的经验后，后续要是再开发类似的内容想必就能很快上手了。</p>]]></content>
    
    
    <categories>
      
      <category>项目复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目复盘】Minecraft mod开发复盘 - Ruler</title>
    <link href="/2025/02/25/Minecraft%E7%9B%B4%E5%B0%BAmod%E5%BC%80%E5%8F%91%E5%A4%8D%E7%9B%98-1/"/>
    <url>/2025/02/25/Minecraft%E7%9B%B4%E5%B0%BAmod%E5%BC%80%E5%8F%91%E5%A4%8D%E7%9B%98-1/</url>
    
    <content type="html"><![CDATA[<h1 id="mc-mod开发复盘-Ruler"><a href="#mc-mod开发复盘-Ruler" class="headerlink" title="mc mod开发复盘-Ruler"></a>mc mod开发复盘-Ruler</h1><h2 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h2><p>在对Java技术有一定掌握后，萌生了为儿时圆梦，想进行MinecraftMod开发。但是第一次开发mc的mod对各个接口都不熟悉，肯定要选择先开发轻量级的mod练手，于是就想起之前一个个数格子建东西的不便经历，选择开发一个能测量方块的直尺mod。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><ol><li><p>参考了b站up主北山的教程：<a href="https://www.bilibili.com/read/readlist/rl807127?spm_id_from=333.1387.0.0">模组开发指北- 文集 哔哩哔哩专栏</a>，在idea导入fabric的mod模板，进行1.20的mod开发。</p></li><li><p>修改对应的配置文件：</p><ol><li><p>fabric.mod.json中的模组信息和个人信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs dart">&#123;<br><span class="hljs-string">&quot;schemaVersion&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;ruler-mod&quot;</span>,  <span class="hljs-comment">//mod的唯一标识符</span><br><span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;version&#125;</span>&quot;</span>,<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ruler Mod&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;提供了几个用于测量的尺子&quot;</span>, <span class="hljs-comment">//mod迷哦奥数</span><br><span class="hljs-string">&quot;authors&quot;</span>: [<br><span class="hljs-string">&quot;Liuliy&quot;</span> <span class="hljs-comment">//贡献者</span><br>],<br><span class="hljs-string">&quot;custom&quot;</span>: &#123;<br><span class="hljs-string">&quot;modmenu&quot;</span>: &#123;<br><span class="hljs-string">&quot;links&quot;</span>: &#123;<br><span class="hljs-string">&quot;modmenu.issues&quot;</span>: <span class="hljs-string">&quot;https://github.com/Liuliy1/MinecraftRulerMod/issues&quot;</span><br>&#125;<br>&#125;<br>&#125;,<br><span class="hljs-string">&quot;contact&quot;</span>: &#123;<br><span class="hljs-string">&quot;sources&quot;</span>: <span class="hljs-string">&quot;https://github.com/Liuliy1/MinecraftRulerMod&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>, <span class="hljs-comment">//遵循的开源协议,在LICENSE文件中修改完整内容</span><br><span class="hljs-string">&quot;icon&quot;</span>: <span class="hljs-string">&quot;assets/ruler-mod/icon.png&quot;</span>, <span class="hljs-comment">//贴图目录</span><br><span class="hljs-string">&quot;environment&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br><span class="hljs-string">&quot;entrypoints&quot;</span>: &#123; <span class="hljs-comment">//程序入口</span><br><span class="hljs-string">&quot;main&quot;</span>: [<br><span class="hljs-string">&quot;com.liuliy.ruler.RulerMod&quot;</span><br>],<br><span class="hljs-string">&quot;client&quot;</span>: [<br><span class="hljs-string">&quot;com.liuliy.ruler.RulerModClient&quot;</span><br>],<br><span class="hljs-string">&quot;fabric-datagen&quot;</span>: [<br><span class="hljs-string">&quot;com.liuliy.ruler.RulerModDataGenerator&quot;</span><br>]<br>&#125;,<br><span class="hljs-string">&quot;mixins&quot;</span>: [<br><span class="hljs-string">&quot;ruler-mod.mixins.json&quot;</span><br>],<br><span class="hljs-string">&quot;depends&quot;</span>: &#123; <span class="hljs-comment">//各种版本需求</span><br><span class="hljs-string">&quot;fabricloader&quot;</span>: <span class="hljs-string">&quot;&gt;=0.16.10&quot;</span>,<br><span class="hljs-string">&quot;minecraft&quot;</span>: <span class="hljs-string">&quot;&gt;=1.20&quot;</span>,<br><span class="hljs-string">&quot;java&quot;</span>: <span class="hljs-string">&quot;&gt;=17&quot;</span>,<br><span class="hljs-string">&quot;fabric-api&quot;</span>: <span class="hljs-string">&quot;*&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;suggests&quot;</span>: &#123;<br><span class="hljs-string">&quot;another-mod&quot;</span>: <span class="hljs-string">&quot;*&quot;</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、资料获取"><a href="#三、资料获取" class="headerlink" title="三、资料获取"></a>三、资料获取</h2><p>主要是 [<a href="https://wiki.fabricmc.net/tutorial:setup">Fabric Wiki]</a> 里面有写各种功能的接口和案例，再参考其他教程中的案例，就能基本知道开发的整体逻辑。</p><h2 id="四、实际开发"><a href="#四、实际开发" class="headerlink" title="四、实际开发"></a>四、实际开发</h2><p>其实开发这些mod和其他的Java项目并没有什么区别，和之前开发的杀戮尖塔mod也有相似的地方。也就是先建立各种类，实现他们的方法，然后实例化，再把他们的逻辑连接起来，添加到游戏中。</p><h3 id="1-Mod入口"><a href="#1-Mod入口" class="headerlink" title="1. Mod入口"></a>1. Mod入口</h3><p>首先我们需要一个mod入口实现了ModInitializer接口，用于进行mod的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.ParticleManager;<br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.Visualization;<br><span class="hljs-keyword">import</span> com.liuliy.ruler.registry.ModItems;<br><span class="hljs-keyword">import</span> net.fabricmc.api.ModInitializer;<br><span class="hljs-keyword">import</span> net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;<br><span class="hljs-keyword">import</span> net.minecraft.client.MinecraftClient;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RulerMod</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ModInitializer</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MOD_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ruler-mod&quot;</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onInitialize</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 注册所有测量工具</span><br>ModItems.register();<br>ParticleManager.init();<br>        <span class="hljs-comment">//注册mod物品栏</span><br>ModItemGroup.registerModItemGroup();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-注册所有道具"><a href="#2-注册所有道具" class="headerlink" title="2.注册所有道具"></a>2.注册所有道具</h3><p>然后就是用类定义想要开发的道具，然后在mod入口进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.registry;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.items.*;<br><span class="hljs-keyword">import</span> net.fabricmc.fabric.api.itemgroup.v1.FabricItemGroupEntries;<br><span class="hljs-keyword">import</span> net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemGroups;<br><span class="hljs-keyword">import</span> net.minecraft.registry.Registries;<br><span class="hljs-keyword">import</span> net.minecraft.registry.Registry;<br><span class="hljs-keyword">import</span> net.minecraft.util.Identifier;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.ModItemGroup.RULER_ITEM_GROUP_KEY;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.ModItemGroup.Ruler_ITEM_GROUP;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModItems</span> &#123;<br>    <span class="hljs-comment">// 定义物品实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Item</span> <span class="hljs-variable">STRAIGHT_RULER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StraightRulerItem</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Item</span> <span class="hljs-variable">LASER_RANGEFINDER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LaserRangefinderItem</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Item</span> <span class="hljs-variable">LASER_RULER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LaserRulerItem</span>();<br><br>    <span class="hljs-comment">// 注册所有物品</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;<br>        Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;straight_ruler&quot;</span>), STRAIGHT_RULER);<br>        Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;laser_rangefinder&quot;</span>), LASER_RANGEFINDER);<br>        Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;laser_ruler&quot;</span>), LASER_RULER);<br>        Registry.register(Registries.ITEM_GROUP, RULER_ITEM_GROUP_KEY, Ruler_ITEM_GROUP);<br><br>        ItemGroupEvents.modifyEntriesEvent(RULER_ITEM_GROUP_KEY).register(ModItems::addItemsToIG);<br>    &#125;<br>    <span class="hljs-comment">//添加到工具栏</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItemsToIG</span><span class="hljs-params">(FabricItemGroupEntries fabricItemGroupEntries)</span> &#123;<br>        fabricItemGroupEntries.add(STRAIGHT_RULER);<br>        fabricItemGroupEntries.add(LASER_RANGEFINDER);<br>        fabricItemGroupEntries.add(LASER_RULER);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，我们在这里定义了直尺等多个物品。接下来就要具体实现他们的类</p><h3 id="3-实现道具"><a href="#3-实现道具" class="headerlink" title="3.实现道具"></a>3.实现道具</h3><h4 id="3-1实现基类"><a href="#3-1实现基类" class="headerlink" title="3.1实现基类"></a>3.1实现基类</h4><p>我先写了一个类rulerTool，继承Item，作为所有基础测量工具的子类：</p><p>这里限制了所有工具的堆叠数量，以及右键到方块的逻辑useOnBlock，还要存储测量结果的内部类，以及计算测量距离的算法。因为计算距离的算法是用坐标计算的，所以跨纬度使用时完全没用，因此记录使用的维度用来禁止两个点跨纬度计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.items;<br><br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.minecraft.entity.player.PlayerEntity;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemUsageContext;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.ActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RulerTool</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;PlayerEntity, MeasurementData&gt; MEASUREMENTS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RulerTool</span><span class="hljs-params">(Settings settings)</span> &#123;<br>        <span class="hljs-built_in">super</span>(settings.maxCount(<span class="hljs-number">1</span>));  <span class="hljs-comment">// 限制物品堆叠数量为1</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ActionResult <span class="hljs-title function_">useOnBlock</span><span class="hljs-params">(ItemUsageContext context)</span> &#123;<br>       <span class="hljs-comment">//获取初始化数据</span><br>        <span class="hljs-type">PlayerEntity</span> <span class="hljs-variable">player</span> <span class="hljs-operator">=</span> context.getPlayer();<br>        <span class="hljs-type">BlockPos</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> context.getBlockPos();<br>        <span class="hljs-type">Direction</span> <span class="hljs-variable">direction</span> <span class="hljs-operator">=</span> context.getSide();<br>        <span class="hljs-type">World</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> context.getWorld();<br><br>        <span class="hljs-keyword">if</span> (!context.getWorld().isClient) &#123;<br>            <span class="hljs-keyword">return</span> ActionResult.PASS;<br>        &#125;<br><br>        <span class="hljs-comment">// Shift+右键清除测量</span><br>        <span class="hljs-keyword">if</span> (player.isSneaking()) &#123;<br>            MEASUREMENTS.remove(player);<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_clear&quot;</span>), <span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 停止粒子效果</span><br>            clearParticle();<br>            <span class="hljs-keyword">return</span> ActionResult.SUCCESS;<br>        &#125;<br>        <span class="hljs-comment">//进行测量</span><br>        handleMeasurement(player, world, pos,direction);<br>        <span class="hljs-keyword">return</span> ActionResult.SUCCESS;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> ActionResult <span class="hljs-title function_">handleMeasurement</span><span class="hljs-params">(</span><br><span class="hljs-params">            PlayerEntity player, World world, BlockPos pos ,Direction dir</span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearParticle</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MeasurementData</span> &#123;<br>        <span class="hljs-keyword">public</span> BlockPos[] points = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockPos</span>[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 记录两个点的数组</span><br>        <span class="hljs-keyword">public</span> World[] worlds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">World</span>[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 记录两个维度的数组</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 当前步骤</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MeasurementData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 初始化为空点</span><br>            points[<span class="hljs-number">0</span>] = <span class="hljs-literal">null</span>;<br>            points[<span class="hljs-number">1</span>] = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateDistance</span><span class="hljs-params">(BlockPos a, BlockPos b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dx</span> <span class="hljs-operator">=</span> b.getX() - a.getX();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dy</span> <span class="hljs-operator">=</span> b.getY() - a.getY();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dz</span> <span class="hljs-operator">=</span> b.getZ() - a.getZ();<br><br>        <span class="hljs-keyword">return</span> Math.max(Math.abs(dx),Math.max(Math.abs(dy),Math.abs(dz)));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>还增加了一个RulerToolPlus，区别主要是一个需要点击方块useOnBlock，一个可以凭空远距离右键use</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.items;<br><br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.minecraft.entity.player.PlayerEntity;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemStack;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.Hand;<br><span class="hljs-keyword">import</span> net.minecraft.util.TypedActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.hit.BlockHitResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.hit.HitResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RulerToolPlus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;PlayerEntity, MeasurementData&gt; MEASUREMENTS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RulerToolPlus</span><span class="hljs-params">(Settings settings)</span> &#123;<br>        <span class="hljs-built_in">super</span>(settings.maxCount(<span class="hljs-number">1</span>));  <span class="hljs-comment">// 限制物品堆叠数量为1</span><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TypedActionResult&lt;ItemStack&gt; <span class="hljs-title function_">use</span><span class="hljs-params">(World world, PlayerEntity player, Hand hand)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (!world.isClient) &#123;<br>            <span class="hljs-keyword">return</span> TypedActionResult.pass(player.getStackInHand(hand));<br>        &#125;<br><br>        <span class="hljs-type">BlockHitResult</span> <span class="hljs-variable">hitResult</span> <span class="hljs-operator">=</span> (BlockHitResult) player.raycast(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (hitResult.getType() != HitResult.Type.BLOCK) &#123;<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.aim_at_block&quot;</span>), <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">return</span> TypedActionResult.fail(player.getStackInHand(hand));<br>        &#125;<br>        <span class="hljs-type">BlockPos</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> hitResult.getBlockPos();<br>        <span class="hljs-type">Direction</span> <span class="hljs-variable">direction</span> <span class="hljs-operator">=</span>  hitResult.getSide();<br><br>        <span class="hljs-comment">// Shift+右键清除测量</span><br>        <span class="hljs-keyword">if</span> (player.isSneaking()) &#123;<br>            MEASUREMENTS.remove(player);<br>            <span class="hljs-comment">// 停止粒子效果</span><br>            clearParticle();<br>            <span class="hljs-keyword">return</span> TypedActionResult.success(player.getStackInHand(hand));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> handleMeasurement(player, world, hand, pos,direction);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> TypedActionResult&lt;ItemStack&gt; <span class="hljs-title function_">handleMeasurement</span><span class="hljs-params">(</span><br><span class="hljs-params">            PlayerEntity player, World world, Hand hand, BlockPos pos ,Direction dir</span><br><span class="hljs-params">    )</span>;<br><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearParticle</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MeasurementData</span> &#123;<br>        <span class="hljs-keyword">public</span> BlockPos[] points = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockPos</span>[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 记录两个点的数组</span><br>        <span class="hljs-keyword">public</span> World[] worlds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">World</span>[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 记录两个维度的数组</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 当前步骤</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MeasurementData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 初始化为空点</span><br>            points[<span class="hljs-number">0</span>] = <span class="hljs-literal">null</span>;<br>            points[<span class="hljs-number">1</span>] = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateDistance</span><span class="hljs-params">(BlockPos a, BlockPos b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dx</span> <span class="hljs-operator">=</span> b.getX() - a.getX();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dy</span> <span class="hljs-operator">=</span> b.getY() - a.getY();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dz</span> <span class="hljs-operator">=</span> b.getZ() - a.getZ();<br><br>        <span class="hljs-keyword">return</span> Math.max(Math.abs(dx),Math.max(Math.abs(dy),Math.abs(dz)));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>继承了基类后，子类只需要实现测量方法和清除粒子效果方法的具体实现:</p><h4 id="3-2实现直尺"><a href="#3-2实现直尺" class="headerlink" title="3.2实现直尺"></a>3.2实现直尺</h4><p>对于直尺，实现的逻辑是：</p><ol><li>点击第一下，记录a点坐标，显示粒子效果</li><li>点击第二下，记录b点坐标，显示粒子效果并且计算出距离，用粒子效果将ab连成线</li><li>之后的点击就重复显示测量的距离，直到取消测量</li><li>取消测量后，粒子效果随之消失</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.items;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.ParticleManager;<br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.Visualization;<br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.minecraft.entity.player.PlayerEntity;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.ActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Vec3d;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.client.Visualization.spawnParticlesBetween;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StraightRulerItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RulerTool</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StraightRulerItem</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>.Settings());<br>    &#125;<br>    PlayerEntity player;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Vec3d&gt; activePos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ActionResult <span class="hljs-title function_">handleMeasurement</span><span class="hljs-params">(PlayerEntity player, World world, BlockPos pos, Direction dir)</span> &#123;<br>        <span class="hljs-type">MeasurementData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> MEASUREMENTS.computeIfAbsent(player, p -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeasurementData</span>());<br>        <span class="hljs-built_in">this</span>.player=player;<br>        <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 第一次点击，记录第一个点</span><br>            data.points[<span class="hljs-number">0</span>] = pos;<br>            <span class="hljs-comment">// 标记为已记录第一个点</span><br>            data.step = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//记录世界</span><br>            data.worlds[<span class="hljs-number">0</span>]=world;<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_start&quot;</span>), <span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//显示第一个点的粒子效果</span><br>            ParticleManager.addParticle(data.points[<span class="hljs-number">0</span>],dir);<br>            <span class="hljs-comment">//记录该坐标已生成粒子</span><br>            activePos.add(Visualization.getPosition(pos, dir));<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 记录第二个点并计算距离</span><br>            data.points[<span class="hljs-number">1</span>] = pos;<br>            data.worlds[<span class="hljs-number">1</span>]=world;<br>            <span class="hljs-keyword">if</span> (data.worlds[<span class="hljs-number">0</span>]!=world)&#123;<br>                player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.cross_dimension_error&quot;</span>), <span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">return</span> ActionResult.FAIL;<br>            &#125;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> calculateDistance(data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>]);<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span> , (<span class="hljs-type">int</span>)Math.floor(distance+<span class="hljs-number">1</span>) ), <span class="hljs-literal">false</span>);<br>            data.step = <span class="hljs-number">2</span>;  <span class="hljs-comment">// 测量完成</span><br>            <span class="hljs-comment">// 在第二个点上显示粒子效果</span><br>            ParticleManager.addParticle(data.points[<span class="hljs-number">1</span>],dir);<br>            <span class="hljs-comment">//记录该坐标已生成粒子</span><br>            activePos.add(Visualization.getPosition(pos, dir));<br>            <span class="hljs-comment">//并且在两点之间生成一条粒子线</span><br>            spawnParticlesBetween(world, data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>],dir,<span class="hljs-string">&quot;ruler&quot;</span>);<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">// 第三次点击</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> calculateDistance(data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>]);<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span> , (<span class="hljs-type">int</span>)Math.floor(distance+<span class="hljs-number">1</span>) ), <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ActionResult.SUCCESS;<br><br><br>    &#125;<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearParticle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Vec3d pos : StraightRulerItem.activePos)&#123;<br>            ParticleManager.removeParticle(pos);<br>        &#125;<br><span class="hljs-comment">//        ParticleManager.removeParticle();</span><br>        StraightRulerItem.activePos.clear();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-3实现激光测距仪"><a href="#3-3实现激光测距仪" class="headerlink" title="3.3实现激光测距仪"></a>3.3实现激光测距仪</h4><p>相当于一次性的直尺，测量目标到玩家的距离，粒子效果不保留</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.items;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.ParticleManager;<br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.minecraft.entity.player.PlayerEntity;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemStack;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.ActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.Hand;<br><span class="hljs-keyword">import</span> net.minecraft.util.TypedActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.client.Visualization.spawnParticlesBetweenNow;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LaserRangefinderItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RulerToolPlus</span>  &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LaserRangefinderItem</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>.Settings());<br>    &#125;<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> TypedActionResult&lt;ItemStack&gt; <span class="hljs-title function_">handleMeasurement</span><span class="hljs-params">(PlayerEntity player, World world, Hand hand, BlockPos pos, Direction dir)</span> &#123;<br>        <span class="hljs-comment">// 记录第二个点并计算距离</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> calculateDistance(player.getBlockPos(), pos);<br>        player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span> ,(<span class="hljs-type">int</span>)Math.floor(distance+<span class="hljs-number">1</span>)), <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//并且在两点之间生成一条粒子线</span><br>        spawnParticlesBetweenNow(world,player.getBlockPos(), pos,dir);<br>        <span class="hljs-keyword">return</span> TypedActionResult.success(player.getStackInHand(hand));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearParticle</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-4实现激光直尺"><a href="#3-4实现激光直尺" class="headerlink" title="3.4实现激光直尺"></a>3.4实现激光直尺</h4><p>在普通直尺的基础上和激光测距仪合成，不需要点击方块，可以在远处测量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.items;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.ParticleManager;<br><span class="hljs-keyword">import</span> com.liuliy.ruler.client.Visualization;<br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.minecraft.entity.player.PlayerEntity;<br><span class="hljs-keyword">import</span> net.minecraft.item.Item;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemStack;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.ActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.Hand;<br><span class="hljs-keyword">import</span> net.minecraft.util.TypedActionResult;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Vec3d;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.client.Visualization.spawnParticlesBetween;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LaserRulerItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RulerToolPlus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Vec3d&gt; activePos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LaserRulerItem</span><span class="hljs-params">( )</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>.Settings());<br>    &#125;<br>    PlayerEntity player;<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> TypedActionResult&lt;ItemStack&gt; <span class="hljs-title function_">handleMeasurement</span><span class="hljs-params">(  PlayerEntity player, World world, Hand hand, BlockPos pos, Direction dir)</span> &#123;<br>        <span class="hljs-type">MeasurementData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> MEASUREMENTS.computeIfAbsent(player, p -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MeasurementData</span>());<br>        <span class="hljs-built_in">this</span>.player=player;<br>        <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 第一次点击，记录第一个点</span><br>            data.points[<span class="hljs-number">0</span>] = pos;<br>            data.step = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 标记为已记录第一个点</span><br>            <span class="hljs-comment">//记录世界</span><br>            data.worlds[<span class="hljs-number">0</span>]=world;<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_start&quot;</span>), <span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//显示第一个点的粒子效果</span><br>            ParticleManager.addParticle(data.points[<span class="hljs-number">0</span>],dir);<br>            <span class="hljs-comment">//记录该坐标已生成粒子</span><br>            activePos.add(Visualization.getPosition(pos, dir));<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">1</span>) &#123;<br><br>            <span class="hljs-comment">// 记录第二个点并计算距离</span><br>            data.points[<span class="hljs-number">1</span>] = pos;<br>            <span class="hljs-comment">//记录世界</span><br>            data.worlds[<span class="hljs-number">1</span>]=world;<br>            <span class="hljs-keyword">if</span> (data.worlds[<span class="hljs-number">0</span>]!=world)&#123;<br>                player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.cross_dimension_error&quot;</span>), <span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">return</span> TypedActionResult.fail(player.getStackInHand(hand));<br>            &#125;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> calculateDistance(data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>]);<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span> ,(<span class="hljs-type">int</span>)Math.floor(distance+<span class="hljs-number">1</span>)), <span class="hljs-literal">false</span>);<br>            data.step = <span class="hljs-number">2</span>;  <span class="hljs-comment">// 测量完成</span><br>            <span class="hljs-comment">// 在第二个点上显示粒子效果</span><br>            ParticleManager.addParticle(data.points[<span class="hljs-number">1</span>],dir);<br>            <span class="hljs-comment">//记录该坐标已生成粒子</span><br>            activePos.add(Visualization.getPosition(pos, dir));<br>            <span class="hljs-comment">//并且在两点之间生成一条粒子线</span><br>            spawnParticlesBetween(world, data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>],dir,<span class="hljs-string">&quot;laserRuler&quot;</span>);<br><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.step == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">// 第三次点击</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> calculateDistance(data.points[<span class="hljs-number">0</span>], data.points[<span class="hljs-number">1</span>]);<br>            player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span> ,(<span class="hljs-type">int</span>)Math.floor(distance+<span class="hljs-number">1</span>)), <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> TypedActionResult.success(player.getStackInHand(hand));<br><br><br>    &#125;<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearParticle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.player == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        player.sendMessage(Text.translatable(<span class="hljs-string">&quot;message.ruler-mod.measure_clear&quot;</span>), <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">for</span> (Vec3d pos : LaserRulerItem.activePos)&#123;<br>            ParticleManager.removeParticle(pos);<br>        &#125;<br><span class="hljs-comment">//        ParticleManager.removeParticle();</span><br>        LaserRulerItem.activePos.clear();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-粒子效果"><a href="#4-粒子效果" class="headerlink" title="4.粒子效果"></a>4.粒子效果</h3><p>前面实现了测量后，我们需要呈现出粒子效果</p><p>我在这里使用了两个类来管理</p><h4 id="4-1-Visualization"><a href="#4-1-Visualization" class="headerlink" title="4.1 Visualization"></a>4.1 Visualization</h4><p>用于实现呈现粒子效果的方法，计算粒子效果的坐标.</p><p>需要注意的一点是，我通过在尺子自身的类中记录创建粒子效果的位置，用于取消测量时消除对应的粒子效果。但是生成一条直线时，我的粒子效果的位置是通过一个公共的方法spawnParticlesBetween中计算得知的，因此需要传入一个字符串，来表明生成的粒子效果属于谁，再记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.client;<br><br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.items.LaserRulerItem;<br><span class="hljs-keyword">import</span> com.liuliy.ruler.items.StraightRulerItem;<br><span class="hljs-keyword">import</span> net.minecraft.particle.ParticleTypes;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><br><span class="hljs-keyword">import</span> net.minecraft.util.math.Vec3d;<br><span class="hljs-keyword">import</span> net.minecraft.world.World;<br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><br><br><br><span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Visualization</span> &#123;<br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-comment">// 在指定位置显示粒子效果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spawnParticleAt</span><span class="hljs-params">(World world, Vec3d position)</span> &#123;<br>        <span class="hljs-keyword">if</span> (world.isClient) &#123;<br>            <span class="hljs-comment">// 生成粒子效果</span><br>            world.addParticle(ParticleTypes.END_ROD,<br>                    position.x,  position.y,  position.z,<br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 在两点之间生成持续的粒子效果的直线</span><br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spawnParticlesBetween</span><span class="hljs-params">(World world, BlockPos point1, BlockPos point2,Direction dir,String item)</span> &#123;<br>        <span class="hljs-keyword">if</span> (world.isClient) &#123;<br>            <span class="hljs-comment">// 计算两点之间的差值</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">dx</span> <span class="hljs-operator">=</span> point2.getX() - point1.getX();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">dy</span> <span class="hljs-operator">=</span> point2.getY() - point1.getY();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">dz</span> <span class="hljs-operator">=</span> point2.getZ() - point1.getZ();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">particleCount</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) Math.max(Math.abs(dx), Math.max(Math.abs(dy), Math.abs(dz)));<br><br>            <span class="hljs-type">Vec3d</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getOffset(dir);<br><br>            <span class="hljs-comment">// 在两点之间生成粒子</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= particleCount; i++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">fraction</span> <span class="hljs-operator">=</span> i / (<span class="hljs-type">double</span>) particleCount;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> point1.getX() + dx * fraction;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> point1.getY() + dy * fraction;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> point1.getZ() + dz * fraction;<br>                <span class="hljs-type">Vec3d</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(x,y,z).add(offset);<br>                ParticleManager.addParticle(position,dir);<br>               <span class="hljs-keyword">switch</span> (item)&#123;<br>                   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ruler&quot;</span>:<br>                       StraightRulerItem.activePos.add(position);<br>                       <span class="hljs-keyword">break</span>;<br>                   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;laserRuler&quot;</span>:<br>                       LaserRulerItem.activePos.add(position);<br>                       <span class="hljs-keyword">break</span>;<br>                   <span class="hljs-keyword">default</span>:<br>                       <span class="hljs-keyword">break</span>;<br>               &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 在两点之间生成粒子效果的直线,不持续</span><br>    <span class="hljs-meta">@Environment(EnvType.CLIENT)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spawnParticlesBetweenNow</span><span class="hljs-params">(World world, BlockPos point1, BlockPos point2,Direction dir)</span> &#123;<br>        <span class="hljs-keyword">if</span> (world.isClient) &#123;<br>            <span class="hljs-comment">// 计算两点之间的差值</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">dx</span> <span class="hljs-operator">=</span> point2.getX() - point1.getX();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">dy</span> <span class="hljs-operator">=</span> point2.getY() - point1.getY();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">dz</span> <span class="hljs-operator">=</span> point2.getZ() - point1.getZ();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">particleCount</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) Math.max(Math.abs(dx), Math.max(Math.abs(dy), Math.abs(dz)));<br><br>            <span class="hljs-type">Vec3d</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getOffset(dir);<br><br>            <span class="hljs-comment">// 在两点之间生成粒子</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= particleCount; i++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">fraction</span> <span class="hljs-operator">=</span> i / (<span class="hljs-type">double</span>) particleCount;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> point1.getX() + dx * fraction;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> point1.getY() + dy * fraction;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> point1.getZ() + dz * fraction;<br>                spawnParticleAt(world,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(x,y,z).add(offset));<br>            &#125;<br>        &#125;<br>    &#125;<br>   <span class="hljs-comment">//获取生成粒子的坐标</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vec3d <span class="hljs-title function_">getPosition</span><span class="hljs-params">(BlockPos pos,Direction dir)</span>&#123;<br>            <span class="hljs-type">Vec3d</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(pos.getX(), pos.getY() , pos.getZ()).add(getOffset(dir));<br>        <span class="hljs-keyword">return</span> position ;<br>    &#125;<br><br>    <span class="hljs-comment">//获取偏移量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vec3d <span class="hljs-title function_">getOffset</span><span class="hljs-params">(Direction dir)</span>&#123;<br>        <span class="hljs-comment">// 计算粒子效果的位置：离方块面向玩家的面0.5格的距离</span><br>        <span class="hljs-comment">// 基础偏移量：方块中心点 (0.5, 0.5, 0.5)</span><br>        <span class="hljs-type">Vec3d</span> <span class="hljs-variable">baseOffset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);<br>        <span class="hljs-type">double</span> Value=<span class="hljs-number">0.7</span>;<br>        <span class="hljs-comment">// 根据不同的面添加微调偏移</span><br>        <span class="hljs-type">Vec3d</span> <span class="hljs-variable">faceOffset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (dir) &#123;<br>            <span class="hljs-comment">// ----------- 侧面 -----------</span><br>            <span class="hljs-keyword">case</span> NORTH -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -Value);  <span class="hljs-comment">// 北面：Z轴-0.5方向，略微突出</span><br>            <span class="hljs-keyword">case</span> SOUTH -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, Value);   <span class="hljs-comment">// 南面：Z轴+0.5方向</span><br>            <span class="hljs-keyword">case</span> WEST  -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(-Value, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 西面：X轴-0.5方向</span><br>            <span class="hljs-keyword">case</span> EAST  -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(Value, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 东面：X轴+0.5方向</span><br><br>            <span class="hljs-comment">// ----------- 顶部/底部 -----------</span><br>            <span class="hljs-keyword">case</span> UP    -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(<span class="hljs-number">0</span>, Value, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 顶面：Y轴+0.5方向</span><br>            <span class="hljs-keyword">case</span> DOWN  -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(<span class="hljs-number">0</span>, -Value, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 底面：Y轴-0.5方向</span><br><br>            <span class="hljs-keyword">default</span> -&gt; Vec3d.ZERO; <span class="hljs-comment">// 理论上不会触发</span><br>        &#125;;<br>        <span class="hljs-keyword">return</span> baseOffset.add(faceOffset);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-2-ParticleManager"><a href="#4-2-ParticleManager" class="headerlink" title="4.2 ParticleManager"></a>4.2 ParticleManager</h4><p>生成粒子效果后，我们将获得的坐标传入 ParticleManager中进行管理，在这里用activeParticles存储了所有正在显示的粒子效果，并且注册了一个事件来进行每tick更新，保持粒子效果的持续显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler.client;<br><br><br><br><span class="hljs-keyword">import</span> net.fabricmc.api.EnvType;<br><span class="hljs-keyword">import</span> net.fabricmc.api.Environment;<br><span class="hljs-keyword">import</span> net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.BlockPos;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Direction;<br><span class="hljs-keyword">import</span> net.minecraft.util.math.Vec3d;<br><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.liuliy.ruler.client.Visualization.*;<br><br><br><span class="hljs-comment">// 在客户端工具类或独立类中</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParticleManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;ActiveParticle&gt; activeParticles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><br>    <span class="hljs-comment">// 记录活动测量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveParticle</span> &#123;<br><br>        <span class="hljs-keyword">public</span> BlockPos blockPos;<br>        <span class="hljs-comment">//当前粒子效果的坐标</span><br>        <span class="hljs-keyword">public</span> Vec3d position;<br>        <span class="hljs-comment">//生成粒子效果的方块的朝向</span><br>        <span class="hljs-keyword">public</span> Direction direction;<br>        <span class="hljs-comment">//开始时间,用于后续可能实现的渐变效果</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> startTime;<br>        <span class="hljs-comment">//标志当前粒子效果是否持续存在</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isParticleActive;<br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ActiveParticle</span><span class="hljs-params">(Vec3d position, Direction dir)</span> &#123;<br>            <span class="hljs-built_in">this</span>.position=position;<br>            <span class="hljs-built_in">this</span>.direction = dir;<br>            <span class="hljs-built_in">this</span>.startTime = System.currentTimeMillis();<br>            isParticleActive=<span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 注册客户端Tick事件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        ClientTickEvents.END_CLIENT_TICK.register(client -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (client.world != <span class="hljs-literal">null</span> ) &#123;<br>                <span class="hljs-comment">// 每Tick更新所有活动测量</span><br>                activeParticles.forEach(ActiveParticle -&gt;<br>                        spawnParticleAt(client.world, ActiveParticle.position)<br>                );<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加持续测量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addParticle</span><span class="hljs-params">(BlockPos pos, Direction dir)</span> &#123;<br>        activeParticles.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveParticle</span>(getPosition(pos,dir), dir));<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addParticle</span><span class="hljs-params">(Vec3d pos, Direction dir)</span> &#123;<br>        activeParticles.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveParticle</span>(pos, dir));<br><br>    &#125;<br>    <span class="hljs-comment">// 移除测量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeParticle</span><span class="hljs-params">(Vec3d pos)</span> &#123;<br>        activeParticles.removeIf(m -&gt; m.position.equals(pos));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeParticle</span><span class="hljs-params">()</span> &#123;<br>        activeParticles.clear();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-图形材质"><a href="#5-图形材质" class="headerlink" title="5.图形材质"></a>5.图形材质</h3><p>在resources&#x2F;assets&#x2F;ruler-mod&#x2F;models&#x2F;item&#x2F;straight_ruler.json中存放模型json文件表示渲染方式，这里只举个直尺的例子:</p><p>注意种类的ruler-mod就是前文配置文件中的modid</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;parent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;minecraft:item/generated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;textures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;layer0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruler-mod:item/straight_ruler&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>同理在对应的resources&#x2F;assets&#x2F;ruler-mod&#x2F;textures&#x2F;item中存放贴图文件</p><p>前文的注册中有引用贴图资源:<br>Registry.register(Registries.ITEM, new Identifier(“ruler-mod”, “straight_ruler”), STRAIGHT_RULER);</p><p>这里的model文件和贴图文件，以及代码中声明的名词要相同即都是“straight_ruler”</p><h3 id="6-自定义物品栏"><a href="#6-自定义物品栏" class="headerlink" title="6.自定义物品栏"></a>6.自定义物品栏</h3><p>我们以及建立了物品，但是目前只能通过指令获得，接下来就可以做一个自定义物品栏，呈现所有的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.liuliy.ruler;<br><br><span class="hljs-keyword">import</span> com.liuliy.ruler.registry.ModItems;<br><span class="hljs-keyword">import</span> net.fabricmc.fabric.api.itemgroup.v1.FabricItemGroup;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemGroup;<br><span class="hljs-keyword">import</span> net.minecraft.item.ItemStack;<br><span class="hljs-keyword">import</span> net.minecraft.registry.Registries;<br><span class="hljs-keyword">import</span> net.minecraft.registry.Registry;<br><span class="hljs-keyword">import</span> net.minecraft.registry.RegistryKey;<br><span class="hljs-keyword">import</span> net.minecraft.text.Text;<br><span class="hljs-keyword">import</span> net.minecraft.util.Identifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModItemGroup</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerModItemGroup</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RegistryKey&lt;ItemGroup&gt; RULER_ITEM_GROUP_KEY<br>            = RegistryKey.of(Registries.ITEM_GROUP.getKey(), Identifier.of(RulerMod.MOD_ID, <span class="hljs-string">&quot;ruler_group&quot;</span>));<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ItemGroup</span> <span class="hljs-variable">Ruler_ITEM_GROUP</span> <span class="hljs-operator">=</span> FabricItemGroup.builder()<br>            .icon(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemStack</span>(ModItems.STRAIGHT_RULER))<br>            .displayName(Text.translatable( <span class="hljs-string">&quot;itemGroup.ruler-mod.group_name&quot;</span>))<br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个代码中，我们声明了一个物品栏类ModItemGroup，以及他的构造函数，还有一个用于获取物品栏的key “RULER_ITEM_GROUP_KEY”，以及物品栏本身 “Ruler_ITEM_GROUP”。</p><p>接下来还是老样子，进行注册，我在前面的代码已经包括了这部分的内容，分别在RulerMod和ModItems中进行注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RulerMod.cs</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onInitialize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 注册所有测量工具</span><br>    ModItems.register();<br>    ParticleManager.init();<br>    <span class="hljs-comment">//注册物品栏</span><br>    ModItemGroup.registerModItemGroup();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ModItems.cs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;<br>    Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;straight_ruler&quot;</span>), STRAIGHT_RULER);<br>    Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;laser_rangefinder&quot;</span>), LASER_RANGEFINDER);<br>    Registry.register(Registries.ITEM, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;ruler-mod&quot;</span>, <span class="hljs-string">&quot;laser_ruler&quot;</span>), LASER_RULER);<br>    Registry.register(Registries.ITEM_GROUP, RULER_ITEM_GROUP_KEY, Ruler_ITEM_GROUP);<br><span class="hljs-comment">//上面的代码是注册物品，下面这一行是注册物品栏</span><br>    ItemGroupEvents.modifyEntriesEvent(RULER_ITEM_GROUP_KEY).register(ModItems::addItemsToIG);<br>&#125;<br><span class="hljs-comment">//添加到物品栏</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItemsToIG</span><span class="hljs-params">(FabricItemGroupEntries fabricItemGroupEntries)</span> &#123;<br>    fabricItemGroupEntries.add(STRAIGHT_RULER);<br>    fabricItemGroupEntries.add(LASER_RANGEFINDER);<br>    fabricItemGroupEntries.add(LASER_RULER);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-自定义配方"><a href="#7-自定义配方" class="headerlink" title="7.自定义配方"></a>7.自定义配方</h3><p>增加自定义物品栏后，我们能在创造模式下获得我们的物品了，但是生存模式并不行，所有接下来我们要添加对应的配方。</p><p>fabric有一个自动生成配方的方式，用代码的方式配置之后， 就会自动生成对应的json文件。但是那样比较麻烦，我还没弄明白，加上这个mod的内容较少，所以选择直接自己写json文件：</p><p>目录为resources&#x2F;data&#x2F;ruler-mod&#x2F;recipes&#x2F;straight_ruler.json，名字也跟之前一样</p><p>不过要注意的是这里的写法只适用于1.20~1.20.4，低版本我并没有进行测试，但是高版本中高版本好像说recipes是recipe；结果 item是id。我也还没有进行测试</p><p>下面的”B” “G”是可以自己随便改的，只是一个指代符号。对应的物品id可以上wiki查找</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">//straight_ruler<br>&#123;<br>  &quot;type&quot;: <span class="hljs-string">&quot;minecraft:crafting_shaped&quot;</span>,<br>  <span class="hljs-string">&quot;pattern&quot;</span>: [<br>    <span class="hljs-string">&quot; GG&quot;</span>,<br>    <span class="hljs-string">&quot;GBG&quot;</span>,<br>    <span class="hljs-string">&quot;GG &quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    &quot;<span class="hljs-selector-tag">B</span>&quot;: &#123;<br>      &quot;item&quot;: <span class="hljs-string">&quot;minecraft:black_dye&quot;</span><br>    &#125;,<br>    &quot;<span class="hljs-selector-tag">G</span>&quot;: &#123;<br>      &quot;item&quot;: <span class="hljs-string">&quot;minecraft:glass_pane&quot;</span><br>    &#125;<br>  &#125;,<br>  &quot;result&quot;: &#123;<br>    &quot;item&quot;: <span class="hljs-string">&quot;ruler-mod:straight_ruler&quot;</span>,<br>    <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-本地化"><a href="#8-本地化" class="headerlink" title="8.本地化"></a>8.本地化</h3><p>翻看前面的代码可以看见，当我向玩家发送信息时，用的是 player.sendMessage(Text.translatable(“message.ruler-mod.measure_distance” ,这里的“message.ruler-mod.measure_distance”就是用来本地化的内容。</p><p>通过在resources&#x2F;assets&#x2F;ruler-mod&#x2F;lang&#x2F;zh_cn.json中定义相关的翻译，即可根据游戏的语言显示对应的语言.<br>.zh_cn对应的是中文,en_us就是英文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">//zh_cn.json<br>&#123;<br>  <span class="hljs-string">&quot;item.ruler-mod.straight_ruler&quot;</span>: <span class="hljs-string">&quot;直尺&quot;</span>,<br>  <span class="hljs-string">&quot;item.ruler-mod.laser_rangefinder&quot;</span>: <span class="hljs-string">&quot;激光测距仪&quot;</span>,<br>  <span class="hljs-string">&quot;item.ruler-mod.laser_ruler&quot;</span>: <span class="hljs-string">&quot;激光直尺&quot;</span>,<br>  <span class="hljs-string">&quot;message.ruler-mod.measure_start&quot;</span>: <span class="hljs-string">&quot;§a起点已记录！&quot;</span>,<br>  <span class="hljs-string">&quot;message.ruler-mod.cross_dimension_error&quot;</span>: <span class="hljs-string">&quot;§c尺子不能跨维度使用！&quot;</span>,<br>  <span class="hljs-string">&quot;message.ruler-mod.measure_clear&quot;</span>: <span class="hljs-string">&quot;§a已清除测量标记！&quot;</span>,<br>  <span class="hljs-string">&quot;message.ruler-mod.measure_distance&quot;</span>: <span class="hljs-string">&quot;§a两点间的距离: %1<span class="hljs-variable">$s</span> §a格&quot;</span>,<br>  <span class="hljs-string">&quot;message.ruler-mod.aim_at_block&quot;</span>: <span class="hljs-string">&quot;§c请对准方块使用&quot;</span>,<br>  <span class="hljs-string">&quot;itemGroup.ruler-mod.group_name&quot;</span>: <span class="hljs-string">&quot;尺子&quot;</span><br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">//en_us<br>&#123;<br>  <span class="hljs-comment">&quot;item.ruler-mod.straight_ruler&quot;</span>: <span class="hljs-comment">&quot;Ruler&quot;</span>,<br>  <span class="hljs-comment">&quot;item.ruler-mod.laser_rangefinder&quot;</span>: <span class="hljs-comment">&quot;Laser Rangefinder&quot;</span>,<br>  <span class="hljs-comment">&quot;item.ruler-mod.laser_ruler&quot;</span>: <span class="hljs-comment">&quot;Laser Ruler&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.measure_start&quot;</span>: <span class="hljs-comment">&quot;§aThe starting point is recorded！&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.cross_dimension_error&quot;</span>: <span class="hljs-comment">&quot;§cRulers cannot be used across dimensions！&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.measure_clear&quot;</span>: <span class="hljs-comment">&quot;§aThe measure marker has been cleared！&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.measure_distance&quot;</span>: <span class="hljs-comment">&quot;§aThe distance between the two points : %1$s §ablocks&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.measure_block&quot;</span>: <span class="hljs-comment">&quot;§aBlock:&quot;</span>,<br>  <span class="hljs-comment">&quot;message.ruler-mod.aim_at_block&quot;</span>: <span class="hljs-comment">&quot;§cPlease aim at the block&quot;</span>,<br>  <span class="hljs-comment">&quot;itemGroup.ruler-mod.group_name&quot;</span>: <span class="hljs-comment">&quot;Ruler&quot;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ol><li>开发过程中踩了很多坑，其中有一个非常难忘：<strong>默认每一条代码都会在服务端和客户端都计算一次</strong><br>这导致了有的+1操作变成了+2，在刚开始开发时对我造成了很大的困扰，一直找不到bug所在。因此程序中很多地方进行了判断： (world.isClient），判断是客户端才进行执行而服务端不执行。不过我整体的代码对服务器和客户端代码的处理并不严谨，因为涉及的逻辑较少，就有混用的情况.</li><li>单机游戏也相当于同时存在客户端和服务端。一般来说<ol><li>服务端主要负责游戏逻辑处理</li><li>客户端主要负责画面和音效</li></ol></li></ol><h2 id="六、发布"><a href="#六、发布" class="headerlink" title="六、发布"></a>六、发布</h2><p>我分别把mod发布在了,具体发布方式就不赘述了</p><ul><li>github<a href="https://github.com/Liuliy1/MinecraftRulerMod">Liuliy1&#x2F;MinecraftRulerMod: minecraft直尺mod</a></li><li>curseforge <a href="https://legacy.curseforge.com/minecraft/mc-mods/ruler">Ruler - Mods - Minecraft - CurseForge</a></li><li>modrinth <a href="https://modrinth.com/mod/ruler">ruler - Minecraft Mod</a></li></ul><p>至此，复盘结束</p>]]></content>
    
    
    <categories>
      
      <category>项目复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【单人项目】Minecraft mod发布-Ruler</title>
    <link href="/2025/02/11/Minecraft-mod%E5%8F%91%E5%B8%83-%E5%B0%BA%E5%AD%90/"/>
    <url>/2025/02/11/Minecraft-mod%E5%8F%91%E5%B8%83-%E5%B0%BA%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="尺子Ruler-mod"><a href="#尺子Ruler-mod" class="headerlink" title="尺子Ruler mod"></a>尺子Ruler mod</h1><p>为Minecraft 中添加了几个测量方块之间距离的工具，便于建筑</p><p>分别是:</p><ul><li>直尺(近距离测量两方块之间距离)<br><img src="/img/project/ruler/use_ruler.png" alt="直尺"></li><li>激光测距仪(测量玩家到远处的距离)<br><img src="/img/project/ruler/use_laserRangefinder.png" alt="激光测距仪"></li><li>激光直尺(远距离距离测量两方块之间距离)<br><img src="/img/project/ruler/use_laserRuler.png" alt="激光直尺"></li></ul><p>适用版本 Fabric [1.20.0~1.20.4]</p><ul><li><p>Curseforge链接： <a href="https://legacy.curseforge.com/minecraft/mc-mods/ruler">https://legacy.curseforge.com/minecraft/mc-mods/ruler</a></p></li><li><p>modrinth链接：<a href="https://modrinth.com/mod/ruler">https://modrinth.com/mod/ruler</a></p></li><li><p>github链接：<a href="https://github.com/Liuliy1?tab=repositories">https://github.com/Liuliy1?tab=repositories</a></p></li></ul><p>遵循MIT协议</p>]]></content>
    
    
    <categories>
      
      <category>项目发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【单人项目】杀戮尖塔mod发布-抢劫商人</title>
    <link href="/2024/05/06/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94mod%E5%8F%91%E5%B8%83/"/>
    <url>/2024/05/06/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94mod%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Robbing-Merchant"><a href="#Robbing-Merchant" class="headerlink" title="Robbing Merchant"></a>Robbing Merchant</h1><p>这个mod能允许你在杀戮尖塔中抢劫商人</p><p>苦于在只差一点钱的时候的时候遇见商人？ 让我们把他抢个干净！ 但是抢完后，商人将不会再次出现。</p><ul><li>Steam链接： <a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3235423149">https://steamcommunity.com/sharedfiles/filedetails/?id=3235423149</a><br><img src="/img/project/robbingMerchant/steam.jpg" alt="steam页面"></li><li>github链接： <a href="https://github.com/Liuliy1/RobbingMerchantMod">https://github.com/Liuliy1/RobbingMerchantMod</a></li></ul><h2 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h2><h3 id="添加了一个抢劫按钮"><a href="#添加了一个抢劫按钮" class="headerlink" title="添加了一个抢劫按钮"></a>添加了一个抢劫按钮</h3><p><img src="/img/project/robbingMerchant/robBtn.png"></p><h3 id="抢劫后，进入与商人的对战"><a href="#抢劫后，进入与商人的对战" class="headerlink" title="抢劫后，进入与商人的对战"></a>抢劫后，进入与商人的对战</h3><p><img src="/img/project/robbingMerchant/robBattle.png"></p><h3 id="抢劫成功后免费获取商品"><a href="#抢劫成功后免费获取商品" class="headerlink" title="抢劫成功后免费获取商品"></a>抢劫成功后免费获取商品</h3><p><img src="/img/project/robbingMerchant/robEnd1.png"><br><img src="/img/project/robbingMerchant/robEnd2.png"></p><h3 id="商人抢劫后，再次进入商店-商人消失"><a href="#商人抢劫后，再次进入商店-商人消失" class="headerlink" title="商人抢劫后，再次进入商店,商人消失"></a>商人抢劫后，再次进入商店,商人消失</h3><p><img src="/img/project/robbingMerchant/robEnd3.png"></p>]]></content>
    
    
    <categories>
      
      <category>项目发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【团队项目】游戏发布 - 《不义游戏》</title>
    <link href="/2023/10/11/%E3%80%90%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E3%80%91%E6%B8%B8%E6%88%8F%E5%8F%91%E5%B8%83-%E3%80%8A%E4%B8%8D%E4%B9%89%E6%B8%B8%E6%88%8F%E3%80%8B/"/>
    <url>/2023/10/11/%E3%80%90%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E3%80%91%E6%B8%B8%E6%88%8F%E5%8F%91%E5%B8%83-%E3%80%8A%E4%B8%8D%E4%B9%89%E6%B8%B8%E6%88%8F%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="不义游戏"><a href="#不义游戏" class="headerlink" title="不义游戏"></a>不义游戏</h1><p>本作品为2023年9月 机核与Unity联合举办的BOOOM游戏创作挑战赛参赛作品</p><p>全程使用Unity制作</p><p>链接： <a href="https://www.gcores.com/games/113272">https://www.gcores.com/games/113272</a></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>本游戏为2D角色扮演型的策略游戏，在“用骰子游戏来解决纠纷的社会”这一故事背景下，玩家将扮演一位通过策略思考后能操控骰子，从而掌控对局的神选者。你排除旅途上的万难，解开故事的谜团，最终直面那位选择了你的神明。<br>游戏时长 约为1h<br>根据玩家在游戏中的不同选择，能走向三个不同的结局</p><h2 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h2><p><img src="/img/project/unfairGame/talk.png"></p><p>三个结局展示</p><p><img src="/img/project/unfairGame/%E6%A0%87%E5%87%86%E7%BB%93%E5%B1%80.png"><br><img src="/img/project/unfairGame/%E5%92%8C%E5%B9%B3%E7%BB%93%E5%B1%80.png"><br><img src="/img/project/unfairGame/%E6%9D%80%E6%88%AE%E7%BB%93%E5%B1%80.png"></p><h2 id="获奖提名"><a href="#获奖提名" class="headerlink" title="获奖提名"></a>获奖提名</h2><p><img src="/img/project/unfairGame/reward.png"></p>]]></content>
    
    
    <categories>
      
      <category>项目发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>game</tag>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
